<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="3.2.4">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': ''}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="pix" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1536, 864]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="black" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="Go-No Go" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="hi">
      <KeyboardComponent name="start">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="start" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="press">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="25" valType="code"/>
        <Param name="name" updates="None" val="press" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -350)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Press enter to continue" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="instructions">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/Intro1.bmp" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instructions" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="end">
      <TextComponent name="bye">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="35" valType="code"/>
        <Param name="name" updates="None" val="bye" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You have completed the task :)" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="task_ITI">
      <TextComponent name="runITI">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="70" valType="code"/>
        <Param name="name" updates="None" val="runITI" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$ITI" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="boo" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="task_run">
      <KeyboardComponent name="run_response">
        <Param name="allowedKeys" updates="set every repeat" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrans" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="run_response" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1" valType="code"/>
        <Param name="store" updates="constant" val="first key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="70" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".25" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$stim" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="ready_2">
      <TextComponent name="ready">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="70" valType="code"/>
        <Param name="name" updates="None" val="ready" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Get Ready!" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="practice_run">
      <KeyboardComponent name="practice_response">
        <Param name="allowedKeys" updates="set every repeat" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrans" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="practice_response" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".25" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="practice_text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="70" valType="code"/>
        <Param name="name" updates="None" val="practice_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".25" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$stim" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="practice_ITI">
      <TextComponent name="ITIprac">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="70" valType="code"/>
        <Param name="name" updates="None" val="ITIprac" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$ITI" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="boo" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="hi_2">
      <KeyboardComponent name="start_2">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="start_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="press_2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="25" valType="code"/>
        <Param name="name" updates="None" val="press_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -350)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Press enter to begin the test" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="instructions_2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/Intro2.bmp" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instructions_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 75)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="hi_3">
      <KeyboardComponent name="start_3">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="start_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="press_3">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="25" valType="code"/>
        <Param name="name" updates="None" val="press_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -350)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Press enter to begin the test" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="instructions_3">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/Intro3.bmp" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instructions_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 75)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="hi"/>
    <Routine name="ready_2"/>
    <LoopInitiator loopType="TrialHandler" name="practicetrials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('stim', 'X'), ('ITI', 0.75)]), OrderedDict([('stim', 'X'), ('ITI', 1.75)]), OrderedDict([('stim', 'K'), ('ITI', 0.75)]), OrderedDict([('stim', 'X'), ('ITI', 0.75)]), OrderedDict([('stim', 'X'), ('ITI', 2.75)]), OrderedDict([('stim', 'X'), ('ITI', 1.75)]), OrderedDict([('stim', 'K'), ('ITI', 0.75)]), OrderedDict([('stim', 'X'), ('ITI', 0.75)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="practice.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="practicetrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="practice_run"/>
    <Routine name="practice_ITI"/>
    <LoopTerminator name="practicetrials"/>
    <Routine name="hi_2"/>
    <Routine name="ready_2"/>
    <LoopInitiator loopType="TrialHandler" name="run1">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="conditions.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="run1" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="task_run"/>
    <Routine name="task_ITI"/>
    <LoopTerminator name="run1"/>
    <Routine name="hi_3"/>
    <Routine name="ready_2"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.375), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'N'), ('stim', 'K'), ('ITI', 0.875), ('corrans', None)]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 1.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.375), ('corrans', 'space')]), OrderedDict([('trialtype', 'G'), ('stim', 'X'), ('ITI', 0.875), ('corrans', 'space')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="conditions.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="task_run"/>
    <Routine name="task_ITI"/>
    <LoopTerminator name="trials"/>
    <Routine name="end"/>
  </Flow>
</PsychoPy2experiment>
